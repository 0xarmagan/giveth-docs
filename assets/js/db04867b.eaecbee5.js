(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{173:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return d}));var o=n(3),r=n(7),i=(n(0),n(190)),a={id:"dev-guidelines",title:"Developer Guidelines"},l={unversionedId:"dev-guidelines",id:"dev-guidelines",isDocsHomePage:!1,title:"Developer Guidelines",description:"Developers on Giveth are expected to follow these guidelines.",source:"@site/dapps/doc1c-developer-guidelines.md",slug:"/dev-guidelines",permalink:"/dapps/dev-guidelines",editUrl:"https://github.com/giveth/giveth-docs/edit/master/dapps/doc1c-developer-guidelines.md",version:"current",lastUpdatedBy:"divine-comedian",lastUpdatedAt:1624204074,formattedLastUpdatedAt:"6/20/2021",sidebar:"dapps",previous:{title:"Testing Guidelines",permalink:"/dapps/testing-guidelines"},next:{title:"Intro to Giveth TRACE",permalink:"/dapps/introTrace"}},s=[{value:"Code quality",id:"code-quality",children:[]},{value:"Linting",id:"linting",children:[]},{value:"Test driven development",id:"test-driven-development",children:[]},{value:"Gitflow",id:"gitflow",children:[{value:"Pull requests",id:"pull-requests",children:[]}]},{value:"Styling",id:"styling",children:[]},{value:"Code conventions",id:"code-conventions",children:[]}],c={toc:s};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Developers on Giveth are expected to follow these guidelines."),Object(i.b)("h2",{id:"code-quality"},"Code quality"),Object(i.b)("p",null,"We take time to do things right, as we strive for excellence. "),Object(i.b)("h2",{id:"linting"},"Linting"),Object(i.b)("p",null,"We use StandardJS for all linting. All code should follow it's guidelines"),Object(i.b)("h2",{id:"test-driven-development"},"Test driven development"),Object(i.b)("h2",{id:"gitflow"},"Gitflow"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Commit messages"),"\nGit messages should ideally include an issue number and the title of the Issue in the commit title. For example '#235 White label Giveth Dapp - Remove search box'. Give as much detail as is reasonable in the body of the message."),Object(i.b)("p",null,"We encourage you to clan up your git history, as much as possible before opening a pull request. You can squash consequtive commits if that makes sense, you can change older commit messages, quite easily inside of most GUI git tools."),Object(i.b)("h3",{id:"pull-requests"},"Pull requests"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Checklist")),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"You should make sure there are no warnings, in the browser console, or the NodeJS console, before you open a pull request.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"master")," branch is locked and only for PR's that have been ",Object(i.b)("strong",{parentName:"p"},"tested in staging")," and noncritical hotfixes like typo's after merging - ",Object(i.b)("inlineCode",{parentName:"p"},"master")," deploys to ",Object(i.b)("a",{parentName:"p",href:"https://v2.giveth.io"},"https://v2.giveth.io")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"staging")," branch is the default branch where PR's should be directed to. A deploy preview by netlify is offered inside the Pull Request."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"New features")," should be pushed to a new branch named ",Object(i.b)("strong",{parentName:"p"},"$featurename")," (No ",Object(i.b)("strong",{parentName:"p"},"develop")," or ",Object(i.b)("strong",{parentName:"p"},"release")," branches currently, but at least ",Object(i.b)("strong",{parentName:"p"},"develop")," will be added in the future to have a proper staging environment) "),Object(i.b)("h2",{id:"styling"},"Styling"),Object(i.b)("p",null,"Styling should be done in cooperation with senior contributors so a minimum of new styles is introduced locally. As a rule of thumb: all styles that are used more than once or are not very specific to one component should be added in the ",Object(i.b)("strong",{parentName:"p"},"Theme UI definition"),Object(i.b)("inlineCode",{parentName:"p"},"src/gatsby-plugin-theme-ui/index.js")," whenever possible and additionally to a gatsby page we use to collect all defined styles ",Object(i.b)("inlineCode",{parentName:"p"},"src/pages/viewstyles.js")," to quickly check consistency.\nPlease refer to some examples in the code to see how we deal with styles. Local overrides and extensions should be done via ",Object(i.b)("inlineCode",{parentName:"p"},"sx prop")," or ",Object(i.b)("inlineCode",{parentName:"p"},"emotionJS"),"."),Object(i.b)("h2",{id:"code-conventions"},"Code conventions"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"as mentioned above contributor code should be linted with StandardJS"),Object(i.b)("li",{parentName:"ul"},"React components for into the folder ",Object(i.b)("inlineCode",{parentName:"li"},"/src/components")," and component filenames should be written in Camel case.")))}d.isMDXComponent=!0},190:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var o=n(0),r=n.n(o);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),d=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),b=o,m=p["".concat(a,".").concat(b)]||p[b]||u[b]||i;return n?r.a.createElement(m,l(l({ref:t},c),{},{components:n})):r.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);